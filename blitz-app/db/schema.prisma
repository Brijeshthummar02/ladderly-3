datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  createdAt DateTime @default(now())
  id        Int      @id @default(autoincrement())
  updatedAt DateTime @updatedAt

  adminNotes     String    @default("")
  email          String    @unique
  emailBackup    String    @default("")
  emailStripe    String    @default("")
  emailVerified  DateTime?
  hashedPassword String?
  image          String?
  name           String    @default("")
  nameFirst      String    @default("")
  nameLast       String    @default("")

  hasInPersonEventInterest Boolean @default(false)
  hasLiveStreamInterest    Boolean @default(false)
  hasOnlineEventInterest   Boolean @default(false)
  hasOpenToWork            Boolean @default(false)
  hasPublicProfileEnabled  Boolean @default(false)
  hasShoutOutsEnabled      Boolean @default(false)
  hasSmallGroupInterest    Boolean @default(false)

  profileBlurb        String?
  profileContactEmail String?
  profileGitHubUri    String?
  profileHomepageUri  String?
  profileLinkedInUri  String?
  profilePicture      String  @default("")
  residenceCountry    String  @default("")
  residenceUSState    String  @default("")
  totalContributions  Float   @default(0)
  totalStoreSpend     Float   @default(0)

  accounts           Account[]
  contributions      Contribution[]
  quizResults        QuizResult[]
  role               RoleEnum            @default(USER)
  sessions           Session[]
  subscriptions      Subscription[]
  tokens             Token[]
  transactions       Transaction[]
  userChecklists     UserChecklist[]
  uuid               String              @default(uuid())
  userChecklistItems UserChecklistItem[]
  votes              Vote[]

  // New relations for Q&A and blog functionality
  authoredVotables Votable[] @relation("AuthoredVotables")
  comments         Comment[]
}

enum RoleEnum {
  ADMIN
  USER
}

model Account {
  id                       String  @id @default(cuid())
  userId                   Int
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  sessionToken String?  @unique @default(uuid())
  expires      DateTime @default(now())

  user   User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int?
}

model Token {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

enum TokenType {
  RESET_PASSWORD
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserChecklist {
  id                 Int                 @id @default(autoincrement())
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  userId             Int
  checklistId        Int
  isComplete         Boolean             @default(false)
  user               User                @relation(fields: [userId], references: [id])
  checklist          Checklist           @relation(fields: [checklistId], references: [id])
  userChecklistItems UserChecklistItem[]

  @@unique([userId, checklistId])
}

model UserChecklistItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isComplete Boolean @default(false)

  checklistItem   ChecklistItem @relation(fields: [checklistItemId], references: [id])
  checklistItemId Int
  userChecklist   UserChecklist @relation(fields: [userChecklistId], references: [id])
  userChecklistId Int
  user            User          @relation(fields: [userId], references: [id])
  userId          Int

  @@unique([userChecklistId, checklistItemId])
}

model ChecklistItem {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  displayIndex Int
  displayText  String
  detailText   String   @default("")
  isRequired   Boolean  @default(true)
  linkText     String   @default("")
  linkUri      String   @default("")

  version String @default("2023-07-18T00:00:00.517Z")

  checklist          Checklist           @relation(fields: [checklistId], references: [id])
  checklistId        Int
  userChecklistItems UserChecklistItem[]

  @@unique([displayText, checklistId])
}

model Checklist {
  id             Int             @id @default(autoincrement())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  name           String
  version        String
  checklistItems ChecklistItem[]
  userChecklists UserChecklist[]
}

model Subscription {
  id            Int             @id @default(autoincrement())
  userId        Int
  user          User            @relation(fields: [userId], references: [id])
  tier          PaymentTierEnum @default(FREE)
  type          String          @default("ACCOUNT_PLAN")
  createdAt     DateTime        @default(now())
  contributions Contribution[]

  @@unique([userId, type])
}

model Contribution {
  createdAt DateTime @default(now())
  id        Int      @id @default(autoincrement())

  amount              Float
  contributedAt       DateTime
  stripeTransactionId String?
  type                ContributionTypeEnum @default(ONE_TIME)

  subscription   Subscription @relation(fields: [subscriptionId], references: [id])
  subscriptionId Int
  user           User         @relation(fields: [userId], references: [id])
  userId         Int

  @@unique([contributedAt, userId])
}

enum ContributionTypeEnum {
  ONE_TIME
  RECURRING
}

model Transaction {
  id              Int      @id @default(autoincrement())
  userId          Int
  user            User     @relation(fields: [userId], references: [id])
  stripePaymentId String
  description     String
  amount          Float
  createdAt       DateTime @default(now())
}

enum PaymentTierEnum {
  FREE
  PAY_WHAT_YOU_CAN
  PREMIUM
}

model FlashCard {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  frontText String
  backText  String

  sourcePlatformId   String
  sourcePlatformName String
  FlashCardDeck      FlashCardDeck? @relation(fields: [flashCardDeckId], references: [id])
  flashCardDeckId    Int?
}

model PossibleAnswer {
  id                 Int       @id @default(autoincrement())
  inputId            String    @unique
  text               String
  quizItemId         Int
  quizItem           QuizItem  @relation(fields: [quizItemId], references: [id], name: "PossibleAnswersToQuizItem")
  isCorrectAnswerFor QuizItem? @relation("CorrectAnswerToQuizItem")
  correctAnswerForId Int?
}

model QuizItem {
  id              Int              @id @default(autoincrement())
  inputId         String           @unique
  questionText    String
  possibleAnswers PossibleAnswer[] @relation("PossibleAnswersToQuizItem")
  correctAnswer   PossibleAnswer?  @relation(fields: [correctAnswerId], references: [id], name: "CorrectAnswerToQuizItem")
  correctAnswerId Int?             @unique
  quiz            Quiz?            @relation(fields: [quizId], references: [id], name: "QuizItemsToQuiz")
  quizId          Int
}

model Quiz {
  id                 Int              @id @default(autoincrement())
  inputId            String           @unique
  name               String           @unique
  quizItems          QuizItem[]       @relation("QuizItemsToQuiz")
  sourcePlatformId   String
  sourcePlatformName String
  CurriculumUnit     CurriculumUnit[]
  QuizResult         QuizResult[]
}

model CurriculumUnit {
  id              Int           @id @default(autoincrement())
  inputId         String        @unique
  quiz            Quiz          @relation(fields: [quizId], references: [id])
  quizId          Int
  flashCardDeck   FlashCardDeck @relation(fields: [flashCardDeckId], references: [id])
  flashCardDeckId Int
}

model FlashCardDeck {
  id             Int              @id @default(autoincrement())
  flashCards     FlashCard[]
  CurriculumUnit CurriculumUnit[]
}

model QuizResult {
  id     Int     @id @default(autoincrement())
  passed Boolean
  score  Float
  quiz   Quiz    @relation(fields: [quizId], references: [id])
  quizId Int
  user   User    @relation(fields: [userId], references: [id])
  userId Int
}

enum VotableType {
  ANSWER
  CERTIFICATION
  COMPANY
  CONTENT
  EDUCATOR
  FOOD
  JOB_TITLE
  QUESTION
  SKILL
  TECH_INFLUENCER
}

model Votable {
  id                  Int         @id @default(autoincrement())
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  type                VotableType
  name                String
  description         String      @default("")
  body                String? // Added for question/answer/blog content
  tags                String[]
  prestigeScore       Float       @default(0)
  voteCount           Int         @default(0)
  registeredUserVotes Int         @default(0)
  guestVotes          Int         @default(0)
  website             String?
  miscInfo            Json?
  author              User?       @relation("AuthoredVotables", fields: [authorId], references: [id])
  authorId            Int?

  parentVotable   Votable?  @relation("VotableHierarchy", fields: [parentVotableId], references: [id])
  parentVotableId Int?
  childVotables   Votable[] @relation("VotableHierarchy")

  votes      Vote[]
  snapshots  VotableSnapshot[]
  comments   Comment[]
  isAccepted Boolean           @default(false)

  @@unique([type, name])
}

model VotableSnapshot {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  votableId     Int
  prestigeScore Float
  voteCount     Int
  votable       Votable  @relation(fields: [votableId], references: [id])
}

model Vote {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  votable   Votable  @relation(fields: [votableId], references: [id])
  votableId Int
  voter     User?    @relation(fields: [voterId], references: [id])
  voterId   Int?
  voteType  VoteType

  @@unique([voterId, votableId])
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

// New Comment model
model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  body      String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  votable   Votable  @relation(fields: [votableId], references: [id])
  votableId Int
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  createdAt                   DateTime                        @default(now())
  id                          Int                             @id @default(autoincrement())
  updatedAt                   DateTime                        @updatedAt
  adminNotes                  String                          @default("")
  email                       String                          @unique
  emailBackup                 String                          @default("")
  emailStripe                 String                          @default("")
  emailVerified               DateTime?
  hashedPassword              String?
  image                       String?
  name                        String                          @default("")
  nameFirst                   String                          @default("")
  nameLast                    String                          @default("")
  hasInPersonEventInterest    Boolean                         @default(false)
  hasLiveStreamInterest       Boolean                         @default(false)
  hasOnlineEventInterest      Boolean                         @default(false)
  hasOpenToWork               Boolean                         @default(false)
  hasOpenToRelocation         Boolean                         @default(false)
  hasPublicProfileEnabled     Boolean                         @default(false)
  hasShoutOutsEnabled         Boolean                         @default(false)
  hasSmallGroupInterest       Boolean                         @default(false)
  hasDeepJournalingInterest   Boolean                         @default(false)
  journalReminderEnabled      Boolean                         @default(false)
  journalReminderFrequency    ReminderFrequency               @default(WEEKLY)
  journalReminderLastReminded DateTime?
  profileBlurb                String?
  profileContactEmail         String?
  profileCurrentJobCompany    String                          @default("")
  profileCurrentJobTitle      String                          @default("")
  profileDiscordHandle        String?
  profileGitHubUri            String?
  profileHomepageUri          String?
  profileLinkedInUri          String?
  profileTopNetworkingReasons String[]
  profileTopServices          String[]
  profileTopSkills            String[]
  profileYearsOfExperience    Int?
  profileHighestDegree        String?
  profilePicture              String                          @default("")
  residenceCountry            String                          @default("")
  residenceUSState            String                          @default("")
  role                        RoleEnum                        @default(USER)
  uuid                        String                          @default(uuid())
  accounts                    Account[]
  jobSearches                 JobSearch[]
  journalEntries              JournalEntry[]
  Lead                        Lead[]
  quizResults                 QuizResult[]
  sessions                    Session[]
  subscriptions               Subscription[]
  tokens                      Token[]
  transactions                Transaction[]
  userChecklists              UserChecklist[]
  userChecklistItems          UserChecklistItem[]
  practiceCompletions         UserJournalPracticeCompletion[]
  authoredVotables            Votable[]                       @relation("AuthoredVotables")
  votes                       Vote[]
}

model Account {
  id                       String  @id @default(cuid())
  userId                   Int
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?
  sessionToken       String?   @unique @default(uuid())
  expires            DateTime  @default(now())
  userId             Int?
  user               User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Token {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String
  userId      Int
  user        User      @relation(fields: [userId], references: [id])

  @@unique([hashedToken, type])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserChecklist {
  id                 Int                 @id @default(autoincrement())
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  userId             Int
  checklistId        Int
  isComplete         Boolean             @default(false)
  checklist          Checklist           @relation(fields: [checklistId], references: [id])
  user               User                @relation(fields: [userId], references: [id])
  userChecklistItems UserChecklistItem[]

  @@unique([userId, checklistId])
}

model UserChecklistItem {
  id              Int           @id @default(autoincrement())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  isComplete      Boolean       @default(false)
  checklistItemId Int
  userChecklistId Int
  userId          Int
  checklistItem   ChecklistItem @relation(fields: [checklistItemId], references: [id])
  userChecklist   UserChecklist @relation(fields: [userChecklistId], references: [id])
  user            User          @relation(fields: [userId], references: [id])

  @@unique([userChecklistId, checklistItemId])
}

model ChecklistItem {
  id                 Int                 @id @default(autoincrement())
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  displayIndex       Int
  displayText        String
  detailText         String              @default("")
  isRequired         Boolean             @default(true)
  linkText           String              @default("")
  linkUri            String              @default("")
  tags               String[]
  version            String              @default("2023-07-18T00:00:00.517Z")
  checklistId        Int
  checklist          Checklist           @relation(fields: [checklistId], references: [id])
  userChecklistItems UserChecklistItem[]

  @@unique([displayText, checklistId])
}

model Checklist {
  id             Int             @id @default(autoincrement())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  name           String
  version        String
  checklistItems ChecklistItem[]
  userChecklists UserChecklist[]
}

model Subscription {
  id                   Int             @id @default(autoincrement())
  userId               Int
  tier                 PaymentTierEnum @default(FREE)
  type                 String          @default("ACCOUNT_PLAN")
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  stripeCustomerId     String?
  stripeSubscriptionId String?
  user                 User            @relation(fields: [userId], references: [id])

  @@unique([userId, type])
}

model Transaction {
  id              Int      @id @default(autoincrement())
  userId          Int
  stripePaymentId String
  description     String
  amount          Float
  createdAt       DateTime @default(now())
  user            User     @relation(fields: [userId], references: [id])
}

model FlashCard {
  id              Int            @id @default(autoincrement())
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  question        String
  correctAnswer   String
  distractors     String[]
  explanation     String?
  flashCardDeckId Int?
  flashCardDeck   FlashCardDeck? @relation(fields: [flashCardDeckId], references: [id])
}

model Quiz {
  id              Int           @id @default(autoincrement())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @default(now())
  name            String        @unique
  description     String?
  timeLimit       Int?
  courseId        Int?
  flashCardDeckId Int
  course          Course?       @relation(fields: [courseId], references: [id])
  flashCardDeck   FlashCardDeck @relation(fields: [flashCardDeckId], references: [id])
  quizResults     QuizResult[]
}

model FlashCardDeck {
  id          Int         @id @default(autoincrement())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  name        String
  description String?
  courseId    Int?
  flashCards  FlashCard[]
  course      Course?     @relation(fields: [courseId], references: [id])
  quizzes     Quiz[]
}

model Course {
  id             Int             @id @default(autoincrement())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  slug           String          @unique
  title          String
  description    String
  contentItems   CourseContent[]
  flashCardDecks FlashCardDeck[]
  quizzes        Quiz[]
}

model CourseContent {
  id          Int         @id @default(autoincrement())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  title       String
  description String?
  contentUrl  String?
  contentType ContentType @default(TEXT)
  order       Int         @default(0)
  courseId    Int
  course      Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model QuizResult {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  passed    Boolean
  score     Float
  quizId    Int
  userId    Int
  quiz      Quiz     @relation(fields: [quizId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId, quizId, createdAt])
}

model Votable {
  id                  Int               @id @default(autoincrement())
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  type                VotableType
  name                String
  body                String?
  tags                String[]
  prestigeScore       Float             @default(0)
  voteCount           Int               @default(0)
  registeredUserVotes Int               @default(0)
  guestVotes          Int               @default(0)
  website             String?
  miscInfo            Json?
  authorId            Int?
  parentVotableId     Int?
  isAccepted          Boolean           @default(false)
  author              User?             @relation("AuthoredVotables", fields: [authorId], references: [id])
  parentVotable       Votable?          @relation("VotableHierarchy", fields: [parentVotableId], references: [id])
  childVotables       Votable[]         @relation("VotableHierarchy")
  snapshots           VotableSnapshot[]
  votes               Vote[]

  @@unique([type, name])
}

model VotableSnapshot {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  votableId     Int
  prestigeScore Float
  voteCount     Int
  votable       Votable  @relation(fields: [votableId], references: [id])
}

model Vote {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  votableId Int
  voterId   Int
  voteType  VoteType
  votable   Votable  @relation(fields: [votableId], references: [id])
  voter     User     @relation(fields: [voterId], references: [id])

  @@unique([voterId, votableId])
}

model Lead {
  id                          Int      @id @default(autoincrement())
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt
  email                       String   @unique
  userId                      Int?
  isRecruiter                 Boolean  @default(false)
  hasOptOutMarketing          Boolean  @default(false)
  hasOptOutFeatureUpdates     Boolean  @default(false)
  hasOptOutEventAnnouncements Boolean  @default(false)
  hasOptOutNewsletterAndBlog  Boolean  @default(false)
  user                        User?    @relation(fields: [userId], references: [id])

  @@index([userId])
}

model JobSearch {
  id        Int                   @id @default(autoincrement())
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt
  name      String
  startDate DateTime              @default(now())
  endDate   DateTime?
  isActive  Boolean               @default(true)
  notes     String?
  userId    Int
  jobPosts  JobPostForCandidate[]
  user      User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model JobPostForCandidate {
  id                     Int                  @id @default(autoincrement())
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  company                String
  jobTitle               String?
  jobPostUrl             String?
  jobBoardOrChannelName  String?
  resumeVersion          String?
  initialOutreachDate    DateTime?
  initialApplicationDate DateTime?
  lastActionDate         DateTime?
  status                 JobApplicationStatus
  contactName            String?
  contactUrl             String?
  hasReferral            Boolean
  isInboundOpportunity   Boolean
  baseSalary             Int?
  totalCompensation      Int?
  notes                  String?
  jobSearchId            Int
  jobSearch              JobSearch            @relation(fields: [jobSearchId], references: [id], onDelete: Cascade)
  jobSearchSteps         JobSearchStep[]
}

model JobSearchStep {
  id         Int                 @id @default(autoincrement())
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  date       DateTime
  kind       JobSearchStepKind
  notes      String?
  isPassed   Boolean?
  isInPerson Boolean
  jobPostId  Int
  jobPost    JobPostForCandidate @relation(fields: [jobPostId], references: [id], onDelete: Cascade)
}

model JournalEntry {
  id                  Int              @id @default(autoincrement())
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  content             String           @db.VarChar(500)
  entryType           JournalEntryType
  isCareerRelated     Boolean          @default(true)
  isMarkdown          Boolean          @default(false)
  happiness           Int?
  isPublic            Boolean          @default(false)
  mintedFromDateRange DateTime[]       @default(dbgenerated("(ARRAY[]::timestamp without time zone[])::timestamp(3) without time zone[]"))
  mintedFromHashtag   String?
  userId              Int
  user                User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model JournalPractice {
  id          Int                             @id @default(autoincrement())
  createdAt   DateTime                        @default(now())
  updatedAt   DateTime                        @updatedAt
  name        String
  description String
  category    PracticeCategory
  completions UserJournalPracticeCompletion[]
}

model UserJournalPracticeCompletion {
  id         Int             @id @default(autoincrement())
  createdAt  DateTime        @default(now())
  practiceId Int
  userId     Int
  practice   JournalPractice @relation(fields: [practiceId], references: [id], onDelete: Cascade)
  user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([practiceId, userId, createdAt])
}

enum RoleEnum {
  ADMIN
  USER
}

enum TokenType {
  RESET_PASSWORD
}

enum PaymentTierEnum {
  FREE
  PAY_WHAT_YOU_CAN
  PREMIUM
}

enum ContentType {
  TEXT
  VIDEO
  AUDIO
  DOCUMENT
  LINK
  EXERCISE
}

enum VotableType {
  ANSWER
  CERTIFICATION
  COMMENT
  COMPANY
  CONTENT
  EDUCATOR
  FOOD
  JOB_TITLE
  QUESTION
  SKILL
  SCHOOL
  TECH_INFLUENCER
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

enum JobApplicationStatus {
  IN_OUTREACH
  APPLIED
  IN_INTERVIEW
  REJECTED
  OFFER_RECEIVED
  TIMED_OUT
  WITHDRAWN
}

enum JobSearchStepKind {
  BACKGROUND_OR_REFERENCE_CHECK
  BEHAVIORAL_INTERVIEW
  HIRING_MANAGER_CALL
  INITIAL_APPLICATION
  MULTI_ROUND_MULTI_KIND
  NONTECHNICAL_CONVERSATION
  OTHER
  OUTBOUND_MESSAGE
  PHONE_SCREEN
  SYSTEM_DESIGN
  TAKE_HOME_ASSIGNMENT
  TECHNICAL_CODE_SCREEN_AUTOMATED
  TECHNICAL_CODE_SCREEN_MANUAL
  TECHNICAL_CONVERSATION
  TECHNICAL_OTHER
}

enum JournalEntryType {
  LEARNING
  MINTED
  OTHER
  PAIN_POINT
  WIN
}

enum ReminderFrequency {
  DAILY
  WEEKLY
  MONTHLY
}

enum PracticeCategory {
  COMMUNICATION
  LEADERSHIP
  OWNERSHIP
  TECHNICAL
  PERSUASION
  PERSONAL
}
